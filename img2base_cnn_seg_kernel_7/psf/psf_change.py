import numpy as np
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.interpolate import interp1d

string = "0.170305360811122 0.170305360893291 0.170305361096808 0.170305361591116 0.170305362768441 0.170305365518158 0.170305371815577 0.170305385957567 0.170305417097763 0.170305484330953 0.170305626657374 0.170305922059572 0.170306523169974 0.170307722370733 0.170310067734629 0.170314564408934 0.170323015564606 0.170338584650689 0.170366697794524 0.170416451990674 0.170502749102232 0.170649431658424 0.170893742388636 0.171292446749542 0.171929920149233 0.172928376632955 0.174460168827374 0.176761690981759 0.180147856272427 0.185025415911981 0.191902606524688 0.201391874856655 0.214201911996487 0.231115150023249 0.252947455587055 0.280488174184527 0.314421002257161 0.355229285611287 0.403092941534705 0.457787741658300 0.518600473433443 0.584274769701184 0.653001515984339 0.722464355553792 0.789944988661628 0.852485292195751 0.907094838676191 0.950984568159519 0.981801637200412 0.997838075530275 0.998187538576217 0.982830144219461 0.952634346144467 0.909275598217844 0.855082407549469 0.792829452851373 0.725503310784439 0.656068174650233 0.587256724663074 0.521405703496342 0.460347987388953 0.405364492114174 0.357191523019857 0.316073257050594 0.281845542525393 0.254036216747948 0.231968330328748 0.214855397005472 0.201881309559416 0.192261171478788 0.185282444857228 0.180328177279768 0.176885529236318 0.174543438978485 0.172983207044865 0.171965280314443 0.171314783675626 0.170907565264323 0.170657812420106 0.170507727829275 0.170419350258777 0.170368351188823 0.170339509053281 0.170323522111037 0.170314836475361 0.170310210970029 0.170307796291383 0.170306560567238 0.170305940607256 0.170305635675809 0.170305488630068 0.170305419107072 0.170305386878328 0.170305372229282 0.170305365700418 0.170305362847174 0.170305361624466 0.170305361110660 0.170305360898933 0.170305360813375 0.170305360779470"
img = "33.9692307692308 33.7230769230769 35.6000000000000 44.2000000000000 124.169230769231 202.953846153846 112.215384615385 44.3692307692308 38.5846153846154 34.0769230769231 33.0923076923077"
a = string.split(" ")
lista = []
for i in a:
    lista.append(float(i))
a_arr = np.array(lista)
b = img.split(" ")
listb = []
for j in b:
    listb.append(float(j))

# 高斯函数
def gaussian(x, amplitude, mean, stddev,bias):
    return amplitude * np.exp(-((x - mean) / stddev)**2 / 2)+bias

# 假设data是一个包含101个数值的NumPy数组
psf = a_arr  # 这里只是一个示例，你应该使用你的数据替换这一行
img = np.array(listb)

x = np.arange(len(listb))
# 使用curve_fit拟合高斯函数
params, _ = curve_fit(gaussian, x, img)

# 计算拟合后的高斯函数值
fitted_data = gaussian(x, *params)

# # 绘制原始数据和拟合后的高斯函数
plt.plot(x, img, 'o', label='Original Data')
plt.plot(x, fitted_data, '-', label='Fitted Gaussian')
plt.legend()
plt.show()

# 生成x轴坐标
x = np.linspace(0, 10, len(img))

# 创建插值函数
f = interp1d(x, img, kind='cubic')

# 生成新的x轴坐标（150个值）
new_x = np.linspace(0, 10, 101)

# 计算插值后的数据
interpolated_data = f(new_x)

# 绘制原始数据和插值后的数据


plt.plot(x, img, 'o', label='Original Data')
plt.plot(new_x, interpolated_data, '-', label='Interpolated Data')
plt.legend()
plt.show()


# 将发光点图像信息和PSF转换到频域
glowing_point_spectrum = np.fft.fft(interpolated_data)
psf_spectrum = np.fft.fft(psf)

# 在频域中进行除法1
recovered_spectrum = glowing_point_spectrum / (psf_spectrum+0.001)

# 将结果转换回空域
recovered_signal = np.fft.ifft(recovered_spectrum)


def recover_signal(A, C):
    A_spectrum = np.fft.fft(A)
    C_spectrum = np.fft.fft(C)

    # 频域除法，计算B的频谱
    B_spectrum = C_spectrum / A_spectrum

    # 使用逆傅里叶变换从频谱恢复B
    B = np.fft.ifft(B_spectrum)

    # 由于可能存在浮点误差，取实部
    B = np.real(B)

    return B


# 假设A和C是包含101个数值的NumPy数组
A = psf
C = recovered_signal

# 求解B
B = recover_signal(A, C)

# 绘制结果
plt.plot(B)
plt.title("Recovered Signal B")
plt.show()